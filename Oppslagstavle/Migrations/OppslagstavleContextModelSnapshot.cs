// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oppslagstavle.Models;

namespace Oppslagstavle.Migrations
{
    [DbContext(typeof(OppslagstavleContext))]
    partial class OppslagstavleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Borettslag", b =>
                {
                    b.Property<int>("BorettslagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatoOpprettet");

                    b.Property<string>("Navn");

                    b.HasKey("BorettslagId");

                    b.ToTable("DB_Borettslag");

                    b.HasData(
                        new { BorettslagId = 1, DatoOpprettet = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), Navn = "The White House" },
                        new { BorettslagId = 2, DatoOpprettet = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), Navn = "McDonalds" }
                    );
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Bygg", b =>
                {
                    b.Property<int>("ByggId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BorettslagId");

                    b.Property<string>("ByggNavn");

                    b.Property<int>("ByggNr");

                    b.Property<string>("ByggType");

                    b.HasKey("ByggId");

                    b.HasIndex("BorettslagId");

                    b.ToTable("DB_Bygg");

                    b.HasData(
                        new { ByggId = 1, BorettslagId = 1, ByggNavn = "A", ByggNr = 1, ByggType = "Blokk" },
                        new { ByggId = 2, BorettslagId = 1, ByggNavn = "B", ByggNr = 2, ByggType = "Rekkehus" },
                        new { ByggId = 3, BorettslagId = 2, ByggNavn = "C", ByggNr = 3, ByggType = "Blokk" }
                    );
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Enhet", b =>
                {
                    b.Property<int>("EnhetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ByggId");

                    b.Property<int>("EnhetsNr");

                    b.HasKey("EnhetId");

                    b.HasIndex("ByggId");

                    b.ToTable("DB_Enheter");

                    b.HasData(
                        new { EnhetId = 1, ByggId = 1, EnhetsNr = 3 },
                        new { EnhetId = 2, ByggId = 1, EnhetsNr = 30 },
                        new { EnhetId = 3, ByggId = 1, EnhetsNr = 500 },
                        new { EnhetId = 4, ByggId = 2, EnhetsNr = 1 },
                        new { EnhetId = 5, ByggId = 2, EnhetsNr = 90 }
                    );
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Oppslag", b =>
                {
                    b.Property<int>("OppslagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bilde");

                    b.Property<bool>("Deltakelse");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("SluttDato");

                    b.Property<string>("SluttTid");

                    b.Property<DateTime>("StartDato");

                    b.Property<string>("StartTid");

                    b.Property<string>("Tekst");

                    b.Property<string>("Tittel");

                    b.HasKey("OppslagId");

                    b.HasIndex("PersonId");

                    b.ToTable("DB_Oppslag");

                    b.HasData(
                        new { OppslagId = 1, Bilde = "URL", Deltakelse = true, PersonId = 2, SluttDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), SluttTid = "15:00", StartDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), StartTid = "14:00", Tekst = "Nå er det noen som har lagt igjen søppel i oppgangen flere ganger. Dette er ikke tillatt da det lukter søppel i hele oppgangen. Når man tar søpla ut av døra skal man gå hele veien ut døra og kaste søpla i søppeldunkene! Mvh Styret", Tittel = "Søppel i oppgang" },
                        new { OppslagId = 2, Bilde = "URL", Deltakelse = true, PersonId = 3, SluttDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), SluttTid = "15:00", StartDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), StartTid = "14:00", Tekst = "Det er ikke tillatt med dyrehold i Borettslaget! Skal du ha kjæledyr, vennligst flytt. Mvh Styret", Tittel = "Hund og katt" },
                        new { OppslagId = 3, Bilde = "URL", Deltakelse = true, PersonId = 4, SluttDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), SluttTid = "15:00", StartDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), StartTid = "14:00", Tekst = "Nå er det tid for sommerfest! Dette vil foregå i bakgården hvor det er to stk grill tilgjengelig. Ta med mat og drikke og godt humør! Mvh Styret", Tittel = "Sommerfest" },
                        new { OppslagId = 4, Bilde = "URL", Deltakelse = true, PersonId = 3, SluttDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), SluttTid = "15:00", StartDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), StartTid = "14:00", Tekst = "Styret har fått mail fra kommunen om at søppeltømming vil skje på mandager fra nå av. Mvh Styret", Tittel = "Ny dato for søppeltømming" },
                        new { OppslagId = 5, Bilde = "URL", Deltakelse = true, PersonId = 3, SluttDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), SluttTid = "15:00", StartDato = new DateTime(2018, 1, 31, 22, 12, 0, 0, DateTimeKind.Unspecified), StartTid = "14:00", Tekst = "Det har oppstått et problem med porten vår som gjør at den ikke lukker seg ordentlig. Vi ber derfor våre beboere om å se til at porten går ordentlig igjen etter seg slik at ikke uvedkommende får adgang. Mvh Styret", Tittel = "Lukk porten etter dere" }
                    );
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+OppslagIBygg", b =>
                {
                    b.Property<int>("ByggId");

                    b.Property<int>("OppslagId");

                    b.HasKey("ByggId", "OppslagId");

                    b.HasIndex("OppslagId");

                    b.ToTable("DB_OppslagIBygg");

                    b.HasData(
                        new { ByggId = 1, OppslagId = 2 },
                        new { ByggId = 2, OppslagId = 1 },
                        new { ByggId = 1, OppslagId = 3 },
                        new { ByggId = 1, OppslagId = 4 },
                        new { ByggId = 2, OppslagId = 5 },
                        new { ByggId = 1, OppslagId = 5 }
                    );
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Epost");

                    b.Property<string>("Etternavn");

                    b.Property<string>("Fornavn");

                    b.Property<string>("Fulltnavn");

                    b.Property<string>("Lowercase_Epost");

                    b.Property<int>("PersonType");

                    b.Property<string>("Tlf");

                    b.HasKey("PersonId");

                    b.ToTable("Personer");

                    b.HasDiscriminator<int>("PersonType");
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Beboer", b =>
                {
                    b.HasBaseType("Oppslagstavle.Models.OppslagstavleContext+Person");

                    b.Property<int>("EnhetId");

                    b.HasIndex("EnhetId");

                    b.ToTable("Beboer");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new { PersonId = 1, Epost = "Donald.Trump@gov.com", Etternavn = "Trump", Fornavn = "Donald", Fulltnavn = "Donald Trump", Lowercase_Epost = "donald.trump@gov.com", Tlf = "12121212", EnhetId = 1 },
                        new { PersonId = 7, Epost = "Hillary.Clinton@gov.com", Etternavn = "Clinton", Fornavn = "Hillary", Fulltnavn = "Hillary Clinton", Lowercase_Epost = "hillary.clinton@gov.com", Tlf = "17161514", EnhetId = 1 },
                        new { PersonId = 8, Epost = "Cheesy.McSteak@Mccern.no", Etternavn = "McSteak", Fornavn = "Cheesy", Fulltnavn = "Cheesy McSteak", Lowercase_Epost = "cheesy.mcsteak@mccern.no", Tlf = "25252525", EnhetId = 2 },
                        new { PersonId = 9, Epost = "Chicken.McSalsa@Mccern.no", Etternavn = "McSalsa", Fornavn = "Chicken", Fulltnavn = "Chicken McSalsa", Lowercase_Epost = "chicken.mcsalsa@mccern.no", Tlf = "25252525", EnhetId = 3 },
                        new { PersonId = 10, Epost = "Big.McBigmac@Mccern.no", Etternavn = "McBigmac", Fornavn = "Big", Fulltnavn = "Big McBigmac", Lowercase_Epost = "big.mcbigmac@mccern.no", Tlf = "25252525", EnhetId = 4 },
                        new { PersonId = 11, Epost = "Quarter.Pounder@Mccern.no", Etternavn = "Pounder", Fornavn = "Quarter", Fulltnavn = "Quarter Pounder", Lowercase_Epost = "quarter.pounder@mccern.no", Tlf = "25252525", EnhetId = 5 }
                    );
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Styremedlem", b =>
                {
                    b.HasBaseType("Oppslagstavle.Models.OppslagstavleContext+Person");

                    b.Property<int>("BorettslagId");

                    b.Property<bool>("Styreleder");

                    b.HasIndex("BorettslagId");

                    b.ToTable("Styremedlem");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new { PersonId = 2, Epost = "Donald.Duck@andebymail.ab", Etternavn = "Duck", Fornavn = "Donald", Fulltnavn = "Donald Duck", Lowercase_Epost = "donald.duck@andebymail.ab", Tlf = "12345678", BorettslagId = 1, Styreleder = true },
                        new { PersonId = 3, Epost = "Elvis.Presley@kentucky.us", Etternavn = "Presley", Fornavn = "Elvis", Fulltnavn = "Elvis Presley", Lowercase_Epost = "elvis.presley@kentucky.us", Tlf = "12131415", BorettslagId = 1, Styreleder = false },
                        new { PersonId = 4, Epost = "Skrue.McDuck@andebymail.ab", Etternavn = "McDuck", Fornavn = "Skrue", Fulltnavn = "Skrue McDuck", Lowercase_Epost = "skrue.mcduck@andebymail.ab", Tlf = "65748392", BorettslagId = 1, Styreleder = false },
                        new { PersonId = 5, Epost = "Ole.Olsen@Olsenmail.ole", Etternavn = "Olsen", Fornavn = "Ole", Fulltnavn = "Ole Olsen", Lowercase_Epost = "ole.olsen@olsenmail.ole", Tlf = "90182039", BorettslagId = 2, Styreleder = false },
                        new { PersonId = 6, Epost = "Gunnar.Solstad@norgemail.no", Etternavn = "Solstad", Fornavn = "Gunnar", Fulltnavn = "Gunnar Solstad", Lowercase_Epost = "gunnar.solstad@norgemail.no", Tlf = "25252525", BorettslagId = 2, Styreleder = true }
                    );
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Bygg", b =>
                {
                    b.HasOne("Oppslagstavle.Models.OppslagstavleContext+Borettslag", "Borettslag")
                        .WithMany("Bygg")
                        .HasForeignKey("BorettslagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Enhet", b =>
                {
                    b.HasOne("Oppslagstavle.Models.OppslagstavleContext+Bygg", "Bygg")
                        .WithMany("Enheter")
                        .HasForeignKey("ByggId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Oppslag", b =>
                {
                    b.HasOne("Oppslagstavle.Models.OppslagstavleContext+Styremedlem", "Styremedlem")
                        .WithMany("Oppslag")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+OppslagIBygg", b =>
                {
                    b.HasOne("Oppslagstavle.Models.OppslagstavleContext+Bygg", "Bygg")
                        .WithMany("OppslagIBygg")
                        .HasForeignKey("ByggId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Oppslagstavle.Models.OppslagstavleContext+Oppslag", "Oppslag")
                        .WithMany("OppslagIBygg")
                        .HasForeignKey("OppslagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Beboer", b =>
                {
                    b.HasOne("Oppslagstavle.Models.OppslagstavleContext+Enhet", "Enhet")
                        .WithMany("Beboere")
                        .HasForeignKey("EnhetId");
                });

            modelBuilder.Entity("Oppslagstavle.Models.OppslagstavleContext+Styremedlem", b =>
                {
                    b.HasOne("Oppslagstavle.Models.OppslagstavleContext+Borettslag", "Borettslag")
                        .WithMany("Styremedlemmer")
                        .HasForeignKey("BorettslagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
